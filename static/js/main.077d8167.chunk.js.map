{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasErrors","this","setState","Component","App","onSearchChanged","event","console","log","target","value","searchitem","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCPSC,EATF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACnB,OACI,yBAAKC,UAAU,wDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,cACpB,6BAAMC,GACN,6BAAMC,KCiBHI,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKF,EAAKT,GACVA,GAAIS,EAAKT,GACTC,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,aCJzBU,EATG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAChB,OACI,yBAAKV,UAAU,OACZ,2BAAOA,UAAY,gCAAgCW,KAAK,SAASC,YAAY,eAC7EC,SAAUH,MCGNI,G,MAPA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAQ,UAChEJ,EAAMK,YCiBHC,E,kDAnBZ,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,WAAU,GAHA,E,gEAQdC,KAAKC,SAAS,CAACF,WAAU,M,+BAIzB,OAAGC,KAAKF,MAAMC,UACH,6CAEJC,KAAKT,MAAMK,a,GAhBEM,aCyDbC,E,kDAlDb,aAAe,IAAD,8BACZ,gBAyCFC,gBAAkB,SAACC,GACjBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKR,SAAS,CAAES,WAAYL,EAAMG,OAAOC,SA1CzC,EAAKX,MAAQ,CACXlB,OAAQ,GACR8B,WAAY,IAJF,E,gEAOO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GAEH,OAAO,EAAKd,SAAS,CAAErB,OAAQmC,S,+BAI5B,IAAD,OACHC,EAAiBhB,KAAKF,MAAMlB,OAAOqC,QAAO,SAAAC,GAC5C,OAAOA,EAAM5C,KAAK6C,cAAcC,SAAS,EAAKtB,MAAMY,WAAWS,kBAEjE,OAAiC,IAA7BnB,KAAKF,MAAMlB,OAAOyC,OACb,yCAKL,yBAAK7C,UAAU,MACb,4CAEA,kBAAC,EAAD,CAAWU,aAAcc,KAAKI,kBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACF,kBAAC,EAAD,CAAUxB,OAAQoC,W,GApCVd,aCClBoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SPsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.077d8167.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({id,name,email}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pad3 ma2 grow bw2 shadow-5'>\r\n            <img alt='astro' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>{name}</div>\r\n            <div>{email}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    //throw new Error;\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={user.id}\r\n                            id={user.id}\r\n                            name={user.name}\r\n                            email={user.email}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n    return(\r\n        <div className='pa2'>\r\n           <input className = 'pa3 bg-lightest-blue b--green' type='search' placeholder=\"search robos\"\r\n           onChange={searchChange}>\r\n               </input> \r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style = {{overflowY:'scroll', border:'5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasErrors:false\r\n        };\r\n    }\r\n\r\n    componentDidCatch(){\r\n        this.setState({hasErrors:true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasErrors){\r\n            return <h1>Ooopsssss!!!!</h1>\r\n        }\r\n        return this.props.children;\r\n\r\n    }\r\n}\r\nexport default  ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport './App.css'\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundary from '../Components/ErrorBoundary';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchitem: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => {\n        return response.json()\n      })\n      .then(users => {\n        \n         return this.setState({ robots: users })\n      })\n\n  }\n  render() {\n    let filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchitem.toLowerCase())\n    });\n    if (this.state.robots.length === 0) {\n      return <h1> Loading </h1>\n    }\n    else {\n\n      return (\n        <div className='tc'>\n          <h1>Robo Friends</h1>\n          \n          <SearchBox searchChange={this.onSearchChanged} />\n          <Scroll>\n            <ErrorBoundary>\n          <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n          </Scroll>\n        </div>\n      )\n    }\n  }\n\n  onSearchChanged = (event) => {\n    console.log(event.target.value);\n    this.setState({ searchitem: event.target.value });\n  }\n\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Containers/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}